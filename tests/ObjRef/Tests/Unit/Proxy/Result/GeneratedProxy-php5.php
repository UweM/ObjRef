<?php
namespace TESTSPACE;

use ObjRef\C;
use ObjRef\HostInterface;
use ObjRef\Proxy\ManagerInterface;

/**
 * Remote Proxy for class ObjRef\Tests\Proxy\TestObject
 *
 * This file is auto generated by ObjRef.
 */
class ObjRef_Tests_Proxy_TestObject extends \ObjRef\Tests\Proxy\TestObject
{

    private $manager = null;

    private $host = null;

    private $ref = null;

    public function __construct(ManagerInterface $manager, HostInterface $host, $ref)
    {
        $this->manager = $manager;
        $this->host = $host;
        $this->ref = $ref;
    }

    private function __proxy_run($cmd, $name, $args=[])
    {
        $args = $this->manager->insertProxyMarker($args);
        $this->host->getTransport()->send([
            C::REF => $this->ref,
            C::CMD => $cmd,
            C::NAME => $name,
            C::ARGS => $args,
        ]);
        // restore possible ProxyMarker in object properties of a TransferObject
        $this->manager->restoreWithoutProxyMarker($args);
        return $this->host->run();
    }

    public function __call($name, $args)
    {
        return $this->__proxy_run(C::CALL, $name, $args);
    }

    public function __set($name, $value)
    {
        return $this->__proxy_run(C::SET, $name, $value);
    }

    public function __get($name)
    {
        return $this->__proxy_run(C::GET, $name);
    }

    public function __isset($name)
    {
        return $this->__proxy_run(C::CISSET, $name);
    }

    public function __unset($name)
    {
        return $this->__proxy_run(C::CUNSET, $name);
    }

    public function foo(\stdClass $b)
    {
        return $this->__proxy_run(C::CALL, __FUNCTION__, func_get_args());
    }

    public function bar($hello = 'world')
    {
        return $this->__proxy_run(C::CALL, __FUNCTION__, func_get_args());
    }


}
