<?php
namespace ObjRef\Proxy;

use Zend\Code\Generator\ClassGenerator;
use Zend\Code\Generator\DocBlockGenerator;
use Zend\Code\Generator\MethodGenerator;
use Zend\Code\Generator\ParameterGenerator;
use Zend\Code\Generator\PropertyGenerator;

class Generator implements GeneratorInterface{
    private $proxyDirectory;
    private $proxyNamespace;

    /**
     * @param $proxyDirectory
     * @param $proxyNamespace
     */
    public function __construct($proxyDirectory, $proxyNamespace) {
        $this->proxyDirectory = $proxyDirectory;
        $this->proxyNamespace = $proxyNamespace;
    }

    /**
     * @param $classFQCN
     */
    public function generate($classFQCN) {
        if(!is_dir($this->proxyDirectory)) {
            mkdir($this->proxyDirectory, 0775, true);
        }
        file_put_contents($this->getFullProxyPath($classFQCN), "<?php\n".$this->generateCode($classFQCN));
    }

    /**
     * @param $classFQCN
     * @return string
     */
    public function getFullProxyPath($classFQCN) {
        return $this->proxyDirectory.'/'.$this->getProxyName($classFQCN).'.php';
    }

    /**
     * @param $classFQCN
     * @return mixed
     */
    public function getProxyName($classFQCN) {
        $class = $this->sanitizeClassName($classFQCN);
        $class = str_replace('_', '__', $class);
        $class = str_replace('\\', '_', $class);
        return $class;
    }

    /**
     * @param $classFQCN
     * @return string
     */
    public function getProxyNameFQCN($classFQCN) {
        return $this->proxyNamespace.'\\'.$this->getProxyName($classFQCN);
    }

    /**
     * @return string
     */
    public function getProxyNamespace() {
        return $this->proxyNamespace;
    }

    /**
     * @param $classFQCN
     * @return string
     */
    private function sanitizeClassName($classFQCN) {
        if($classFQCN[0] == '\\') {
            $classFQCN = substr($classFQCN, 1);
        }
        return $classFQCN;
    }

    /**
     * @param $classFQCN
     * @return string
     */
    private function generateCode($classFQCN) {
        $classFQCN = $this->sanitizeClassName($classFQCN);
        $r = new \ReflectionClass($classFQCN);

        $class = $this->createStub($classFQCN);
        $this->generateGenericMethods($class);

        foreach($r->getMethods() as $method) {
            if($method->isPublic() && !$method->isStatic() && !$method->isConstructor()) {
                $class->addMethodFromGenerator($this->generateMethod($method));
            }
        }
        return $class->generate();
    }

    /**
     * @param $classFQCN
     * @return ClassGenerator
     */
    private function createStub($classFQCN) {
        $class = new ClassGenerator($this->getProxyName($classFQCN));
        $class
            ->setNamespaceName($this->proxyNamespace)
            ->setExtendedClass('\\'.$classFQCN)
            ->setFinal(true)
            ->addUse('ObjRef\\C')
            ->addUse('ObjRef\\HostInterface')
            ->addUse('ObjRef\\Proxy\\ManagerInterface')
            ->addProperty('manager', null, PropertyGenerator::FLAG_PRIVATE)
            ->addProperty('host', null, PropertyGenerator::FLAG_PRIVATE)
            ->addProperty('ref', null, PropertyGenerator::FLAG_PRIVATE)
            ->setDocBlock(new DocBlockGenerator('Remote Proxy for class '.$classFQCN, 'This file is auto generated by ObjRef.'));
        ;
        return $class;
    }

    /**
     * @param ClassGenerator $class
     */
    private function generateGenericMethods(ClassGenerator $class) {
        $class->addMethod(
            '__construct',
            [
                new ParameterGenerator('manager', 'ManagerInterface'),
                new ParameterGenerator('host', 'HostInterface'),
                new ParameterGenerator('ref'),
            ],
            MethodGenerator::FLAG_PUBLIC,

            '$this->manager = $manager;'.PHP_EOL.
            '$this->host = $host;'.PHP_EOL.
            '$this->ref = $ref;'.PHP_EOL
        );
        $class->addMethod('__proxy_run', ['cmd', 'name', 'args=[]'], MethodGenerator::FLAG_PRIVATE,
            '$args = $this->manager->insertProxyMarker($args);'.PHP_EOL.
            '$this->host->getTransport()->send(['.PHP_EOL.
            '    C::REF => $this->ref,'.PHP_EOL.
            '    C::CMD => $cmd,'.PHP_EOL.
            '    C::NAME => $name,'.PHP_EOL.
            '    C::ARGS => $args,'.PHP_EOL.
            ']);'.PHP_EOL.
            '// restore possible ProxyMarker in object properties of a TransferObject'.PHP_EOL.
            '$this->manager->restoreWithoutProxyMarker($args);'.PHP_EOL.
            'return $this->host->run();'.PHP_EOL
        );
        $class->addMethod('__call',  ['name', 'args'],  MethodGenerator::FLAG_PUBLIC, 'return $this->__proxy_run(C::CALL, $name, $args);');
        $class->addMethod('__set',   ['name', 'value'], MethodGenerator::FLAG_PUBLIC, 'return $this->__proxy_run(C::SET, $name, $value);');
        $class->addMethod('__get',   ['name'],          MethodGenerator::FLAG_PUBLIC, 'return $this->__proxy_run(C::GET, $name);');
        $class->addMethod('__isset', ['name'],          MethodGenerator::FLAG_PUBLIC, 'return $this->__proxy_run(C::CISSET, $name);');
        $class->addMethod('__unset', ['name'],          MethodGenerator::FLAG_PUBLIC, 'return $this->__proxy_run(C::CUNSET, $name);');
    }

    /**
     * @param \ReflectionMethod $method
     * @return MethodGenerator
     */
    private function generateMethod(\ReflectionMethod $method) {
        $gen = new MethodGenerator($method->getName());
        foreach($method->getParameters() as $param) {
            $paramgen = new ParameterGenerator(
                $param->getName(),
                $param->getClass() ? '\\'.$param->getClass()->name : null,
                null,
                $param->isPassedByReference()
            );
            // setting default value here because the construtor ignores "null" as default
            if($param->isDefaultValueAvailable()) {
                $paramgen->setDefaultValue($param->getDefaultValue());
            }
            $gen->setParameter($paramgen);
        }
        $gen->setBody('return $this->__proxy_run(C::CALL, __FUNCTION__, func_get_args());');
        return $gen;
    }
}
